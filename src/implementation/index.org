#+title:  Implementation of different models
#+AUTHOR: VLEAD
#+DATE: [2016-05-18 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../../org-templates/level-2.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export

* Introduction
  The implementation is done at several layers - Object, ORM, REST and Front
  End. 


* Code structure

  build/code
      - src
          - implemtation
              - op-exceptions
              - utils
              - objects
              - persistence
                   - serialize
                   - orm
              - rest
              - web


** Custom Exceptions
   These are some of the custom exceptions used in the application.
*** AttributeRequired

#+name: class_AttributeRequired
#+BEGIN_SRC python
class AttributeRequired(Exception):
    str = None

    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)

#+END_SRC

*** Constraint Error
#+name: class_ConstraintError
#+BEGIN_SRC python
class ConstraintError(Exception):
    str = None

    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)

#+END_SRC

*** NotAuthorized Error
#+name: class_NotAuthorizedError
#+BEGIN_SRC python
class NotAuthorizedError(Exception):
    str = None

    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)

#+END_SRC


* Tangling

** =src/=
*** =__init__.py=
#+BEGIN_SRC python :tangle ../src/implementation/__init__.py :eval no :noweb yes
print "implementation package"
import os
import sys

__all__ = ['set_import_search_path']


def set_import_search_path():
    # The assumption here is that this script is in the src directory
    # which is one directory above ovpl
    webapp_directory_path = os.path.dirname(os.path.abspath(__file__))
    path_list = webapp_directory_path.split("/")
    path_list = path_list[:-2]  # till code
    webapp_directory_path = "/".join(path_list)
    src_path = webapp_directory_path + "/src"
    tests_path = webapp_directory_path + "/tests"
    s_implementation_path = src_path + "/implementation"
    t_implementation_path = tests_path + "/implementation"
    s_objects_path = src_path + "/implementation/objects"
    t_objects_path = tests_path + "/implementation/objects"
    deployment_path = src_path + "/deployment"

    if webapp_directory_path not in sys.path:
        sys.path.append(webapp_directory_path)
    if src_path not in sys.path:
        sys.path.append(src_path)
    if tests_path not in sys.path:
        sys.path.append(tests_path)
    if s_implementation_path not in sys.path:
        sys.path.append(s_implementation_path)
    if t_implementation_path not in sys.path:
        sys.path.append(t_implementation_path)
    if s_objects_path not in sys.path:
        sys.path.append(s_objects_path)
    if t_objects_path not in sys.path:
        sys.path.append(t_objects_path)
    if deployment_path not in sys.path:
        sys.path.append(deployment_path)


set_import_search_path()

#+end_src
*** =op-exceptions.py=
#+BEGIN_SRC python :tangle ../../src/implementation/op_exceptions.py :eval no :noweb yes
<<class_AttributeRequired>>
<<class_ConstraintError>>
<<class_NotAuthorizedError>>
#+end_src

** =tests/=
*** =__init__.py=
#+BEGIN_SRC python :tangle ../tests/implementation/__init__.py :eval no :noweb yes
print "tests implementation package"
import os
import sys

__all__ = ['set_import_search_path']


def set_import_search_path():
    # The assumption here is that this script is in the src directory
    # which is one directory above ovpl
    webapp_directory_path = os.path.dirname(os.path.abspath(__file__))
    path_list = webapp_directory_path.split("/")
    path_list = path_list[:-2]  # remove src - till code
    webapp_directory_path = "/".join(path_list)
    src_path = webapp_directory_path + "/src"
    tests_path = webapp_directory_path + "/tests"
    s_implementation_path = src_path + "/implementation"
    t_implementation_path = tests_path + "/implementation"
    s_objects_path = src_path + "/implementation/objects"
    t_objects_path = tests_path + "/implementation/objects"
    deployment_path = src_path + "/deployment"

    if webapp_directory_path not in sys.path:
        sys.path.append(webapp_directory_path)
    if src_path not in sys.path:
        sys.path.append(src_path)
    if tests_path not in sys.path:
        sys.path.append(tests_path)
    if s_implementation_path not in sys.path:
        sys.path.append(s_implementation_path)
    if t_implementation_path not in sys.path:
        sys.path.append(t_implementation_path)
    if s_objects_path not in sys.path:
        sys.path.append(s_objects_path)
    if t_objects_path not in sys.path:
        sys.path.append(t_objects_path)
    if deployment_path not in sys.path:
        sys.path.append(deployment_path)


set_import_search_path()

#+end_src

