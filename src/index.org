#+TITLE: Building a Web Application:  Ground up to the Cloud
#+AUTHOR: Venkatesh Choppella,  Thirumal Ravula and Sripathi Kammari @ VLEAD, IIIT Hyderabad
#+DATE: [2016-05-11 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ./org-templates/level-0.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export

* Version/Branch History

- =mini= :: Version with only Users and Sessions as the main
     Entities.  No  Roles. 


* Goal

The Goal of this course is to walk you through an end-to-end
requirements specification, design, development and
deployment of a small web application.  In the process, you
will learn to use various technologies and will be
introduced to well-established processes and good software
development practices that we use here at VLEAD.


* Components of a web application
A /web application/ consists of a collection of continuously
running programs possibly running on different machines,
connected, and geographically distant from each other.
(Such programs are called services.)  On the user's
machine's end is a program running inside the /web browser/
which displays the output of the application as well as
functions as an interface for the user to send information
to the application.

The server side of the application runs as a thread inside a
/web server/.  The job of the web server is to listen for
inputs, get the server side web application thread to
compute an output and then serve that output back to the
user's browser.
 
The web application usually has a third component, which is
a /database/.  The database stores data needed by the
application.  The database allows the data to survive even
if the application stops.

The data items in the database are related to one another.
The types of the data and the relations between them and the
operations permitted on the data items are expressed using a
/data model/.

The web application allows access to its underlying data via
/URL addresses/ (sometime along with form fields).  The
specification of the mapping of the urls to operations on
the data is called a /REST API/. 


* Software Development Life Cycle  (SDLC)

A systematic development of the application requires that we
break down the entire realization of the application into
multiple, intertwined phases.  In this short course, our
application life cycle will include the following phases:

|-----+-------------------------+-----------------------+---------------------------+---|
| No. | Phase                   | Resultant artefact    | Format                    |   |
|-----+-------------------------+-----------------------+---------------------------+---|
|  1. | Requirements definition | Requirements document | English (text)            |   |
|-----+-------------------------+-----------------------+---------------------------+---|
|  2. | Data model              | Formal specification  | Specification language    |   |
|     | (Design)                |                       | and diagrams              |   |
|-----+-------------------------+-----------------------+---------------------------+---|
|  3. | Object implementation   | Code                  | Python                    |   |
|-----+-------------------------+-----------------------+---------------------------+---|
|  4. | Object Relational Model | Code                  | Python, SQL-Alchemy       |   |
|-----+-------------------------+-----------------------+---------------------------+---|
|  5. | Rest API                | Spec + Code           | Python Flask Library      |   |
|-----+-------------------------+-----------------------+---------------------------+---|
|  6. | Front End               | Spec + Code           | JS, Angular.js            |   |
|-----+-------------------------+-----------------------+---------------------------+---|
|  7. | Deployment              | Code, Deployment spec | JSON, makefiles           |   |
|-----+-------------------------+-----------------------+---------------------------+---|
|  8. | Unit Testing            | Code                  | Flask/Python unit testing |   |
|-----+-------------------------+-----------------------+---------------------------+---|
|  9. | Documentation           | Literate Program      | Org-mode/HTML             |   |
|-----+-------------------------+-----------------------+---------------------------+---|
| 10. | Planning and tracking   | Issues on Githhub     | Text                      |   |
|-----+-------------------------+-----------------------+---------------------------+---|
| 11. | Versioning              | Git                   | GitHub Repositories       |   |
|-----+-------------------------+-----------------------+---------------------------+---|
| 12. | Release Management      | GitHub Tags and       |                           |   |
|     |                         | branches              |                           |   |
|-----+-------------------------+-----------------------+---------------------------+---|
| 13. | Continuous Integration  | GitHub hooks          |                           |   |
|-----+-------------------------+-----------------------+---------------------------+---|



* Application

As part of this course, we develop a [[./app.org][User Directory Web
Application]].


* Code structure

  build/code
      - src
          - implemtation
              - objects
              - persistence
                   - serialize
                   - orm
              - rest
              - web
      - tests
         - implemtation
              - objects
              - persistence
                   - serialize
                   - orm
              - rest
              - web
    

* Tangling

** =build/code/=
*** =__init__.py=
#+BEGIN_SRC python :tangle __init__.py :eval no :noweb yes
print "code package"
import os
import sys

__all__ = ['set_import_search_path']

def set_import_search_path():
    # The assumption here is that this script is in the src directory
    # which is one directory above ovpl
    webapp_directory_path = os.path.dirname(os.path.abspath(__file__))
    src_path = webapp_directory_path + "/src"
    tests_path = webapp_directory_path + "/tests"
    s_implementation_path = src_path + "/implementation"
    t_implementation_path = tests_path + "/implementation"
    s_objects_path = src_path + "/implementation/objects"
    t_objects_path = tests_path + "/implementation/objects"
    deployment_path = src_path + "/deployment"

    if webapp_directory_path not in sys.path:
        sys.path.append(webapp_directory_path)
    if src_path not in sys.path:
        sys.path.append(src_path)
    if tests_path not in sys.path:
        sys.path.append(tests_path)
    if s_implementation_path not in sys.path:
        sys.path.append(s_implementation_path)
    if t_implementation_path not in sys.path:
        sys.path.append(t_implementation_path)
    if s_objects_path not in sys.path:
        sys.path.append(s_objects_path)
    if t_objects_path not in sys.path:
        sys.path.append(t_objects_path)
    if deployment_path not in sys.path:
        sys.path.append(deployment_path)


set_import_search_path()

#+end_src
** =src/=
*** =__init__.py=
#+BEGIN_SRC python :tangle ./src/__init__.py :eval no :noweb yes
print "src package"
import os
import sys

__all__ = ['set_import_search_path']


def set_import_search_path():
    # The assumption here is that this script is in the src directory
    # which is one directory above ovpl
    webapp_directory_path = os.path.dirname(os.path.abspath(__file__))
    path_list = webapp_directory_path.split("/")
    path_list = path_list[:-1]  # remove src - till code
    webapp_directory_path = "/".join(path_list)
    src_path = webapp_directory_path + "/src"
    tests_path = webapp_directory_path + "/tests"
    s_implementation_path = src_path + "/implementation"
    t_implementation_path = tests_path + "/implementation"
    s_objects_path = src_path + "/implementation/objects"
    t_objects_path = tests_path + "/implementation/objects"
    deployment_path = src_path + "/deployment"

    if webapp_directory_path not in sys.path:
        sys.path.append(webapp_directory_path)
    if src_path not in sys.path:
        sys.path.append(src_path)
    if tests_path not in sys.path:
        sys.path.append(tests_path)
    if s_implementation_path not in sys.path:
        sys.path.append(s_implementation_path)
    if t_implementation_path not in sys.path:
        sys.path.append(t_implementation_path)
    if s_objects_path not in sys.path:
        sys.path.append(s_objects_path)
    if t_objects_path not in sys.path:
        sys.path.append(t_objects_path)
    if deployment_path not in sys.path:
        sys.path.append(deployment_path)


set_import_search_path()

#+end_src
** =tests/=
*** =__init__.py=
#+BEGIN_SRC python :tangle ./tests/__init__.py :eval no :noweb yes
print "tests package"

import os
import sys

__all__ = ['set_import_search_path']


def set_import_search_path():
    # The assumption here is that this script is in the src directory
    # which is one directory above ovpl
    webapp_directory_path = os.path.dirname(os.path.abspath(__file__))
    path_list = webapp_directory_path.split("/")
    path_list = path_list[:-1]  # remove src - till code
    webapp_directory_path = "/".join(path_list)
    src_path = webapp_directory_path + "/src"
    tests_path = webapp_directory_path + "/tests"
    s_implementation_path = src_path + "/implementation"
    t_implementation_path = tests_path + "/implementation"
    s_objects_path = src_path + "/implementation/objects"
    t_objects_path = tests_path + "/implementation/objects"
    deployment_path = src_path + "/deployment"

    if webapp_directory_path not in sys.path:
        sys.path.append(webapp_directory_path)
    if src_path not in sys.path:
        sys.path.append(src_path)
    if tests_path not in sys.path:
        sys.path.append(tests_path)
    if s_implementation_path not in sys.path:
        sys.path.append(s_implementation_path)
    if t_implementation_path not in sys.path:
        sys.path.append(t_implementation_path)
    if s_objects_path not in sys.path:
        sys.path.append(s_objects_path)
    if t_objects_path not in sys.path:
        sys.path.append(t_objects_path)
    if deployment_path not in sys.path:
        sys.path.append(deployment_path)


set_import_search_path()

#+end_src
